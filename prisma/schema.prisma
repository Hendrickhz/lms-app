// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["fullTextSearch","fullTextIndex"]  // to enable full text search
}

datasource db {
  provider     = "mysql"
  url          = "mysql://hhz:asdffdsa@localhost:3306/lms_app"
  relationMode = "prisma"
}

model Course {
  id          String    @id @default(uuid())
  userId      String
  title       String    @db.Text
  description String?   @db.Text
  imageURL    String?   @db.Text
  price       Float?
  isPublished Boolean   @default(false)
  categoryId  String?
  category    Category? @relation(fields: [categoryId], references: [id])

  chapters    Chapter[] //these are back to back relations with those models
  attachments Attachment[]
  purchases   Purchase[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([categoryId])
  @@fulltext([title]) // to enable full text search
}

model Attachment {
  id        String   @id @default(uuid())
  name      String
  url       String   @db.Text
  courseId  String
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([courseId])
}

model Category {
  id      String   @id @default(uuid())
  name    String
  courses Course[]
}

model Chapter {
  id          String  @id @default(uuid())
  title       String
  description String?
  videoURL    String?
  position     Int
  isPublished Boolean @default(false)
  isFree      Boolean @default(false)

  muxData MuxData? // a relatioship to a model

  courseId String
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  userProgress UserProgress[] // each user has different progresses on the chapter
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt

  @@index([courseId])
}

model MuxData {
  id         String  @id @default(uuid())
  assetId    String
  playbackId String?

  chapterId String  @unique
  chapter   Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)
}

model UserProgress {
  id        String  @id @default(uuid())
  userId    String
  chapterId String
  chapter   Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)

  isCompleted Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([chapterId, userId])
  @@index([chapterId])
}

model Purchase {
  id       String @id @default(uuid())
  userId String
  courseId String
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([courseId])
  @@unique([userId,courseId])// user should be able to purchase a course only one time
}

model StripeCustomer {
  id               String @id @default(uuid())
  userId           String @unique
  StripeCustomerId String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
